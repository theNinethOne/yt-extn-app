{
  "manifest_version": 3,
  "name": "test-one",
  "version": "1.0.0",

  "permissions": ["scripting", "activeTab", "storage", "tabs", "windows"],

  "action": {
    "default_popup": "index.html"
  },

  "host_permissions": ["<all_urls>"],

  "background" : {
        "service_worker" : "background.js",
        "type" : "module"
    },

    "content_scripts" : [
        {"matches" : ["<all_urls>"],
         "js" : ["script.js"]
        }
    ]
}







import { useState } from "react";
import "./App.css";

function App() {
  const [data, setData] = useState();

  async function runContentScript(tabId) {
    await chrome.scripting.executeScript({
      target: { tabId },
      files: ["script.js"],
    });
  }

  async function sendMessageToTab(type, color = null) {
    const [tab] = await chrome.tabs.query({
      active: true,
      currentWindow: true,
    });

    // Inject content script (only if needed)
    await runContentScript(tab.id);

    chrome.tabs.sendMessage(tab.id, { type, color }, (response) => {
      console.log("Response from script:", response);
      if (response) {
      } else {
        console.log("No response from script");
      }
    });

    chrome.runtime.onMessage.addListener(function handleResponse(
      message,
      sender,
      sendResponse
    ) {
      if (message.type === "YOUTUBE_METADATA") {
        setData(message.data);
        chrome.runtime.onMessage.removeListener(handleResponse); // Remove after use
      }
    });
  }

  return (
    <>
      <button onClick={() => sendMessageToTab("changeColor", "blue")}>
        Blue background
      </button>
      <button onClick={() => sendMessageToTab("changeColor", "red")}>
        Red background
      </button>
      <button onClick={() => sendMessageToTab("changeColorToGreen", "green")}>
        Green background
      </button>
      <button onClick={() => sendMessageToTab("getYouTubeData")}>
        Get YouTube Metadata
      </button>
      {data && data.title && (
        <div>
          <h3>{data.title}</h3>
          <p>
            <strong>Channel:</strong> {data.channel}
          </p>
          <p>
            <strong>Video ID:</strong> {data.videoId}
          </p>
          <p>
            <strong>Current Time:</strong> {Math.floor(data.currentTime)} sec
          </p>
          <p>
            <strong>Duration:</strong> {Math.floor(data.duration)} sec
          </p>
          <img
            src={data.thumbnailUrl}
            alt="thumbnail"
            style={{ width: "100%", borderRadius: "6px" }}
          />
        </div>
      )}
    </>
  );
}

export default App;









function bgChange(request) {
    if (request.type === "changeColor") {
      document.body.style.backgroundColor = request.color;
      return { status: "changed to " + request.color };
    }
  
    if (request.type === "changeColorToGreen") {
      document.body.style.backgroundColor = request.color;
      return { status: "changed to green" };
    }
  
    return null;
  }
  
  function youTubeData() {
    const video = document.querySelector('video');
    const title = document.title.replace(' - YouTube', '');
    const url = window.location.href;
    const videoId = new URL(url).searchParams.get("v");
  
    const thumbnailUrl = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;
  
    const metadata = {
      title,
      videoId,
      currentTime: video?.currentTime ?? 0,
      duration: video?.duration ?? 0,
      channel: document.querySelector('#channel-name a')?.innerText?.trim(),
      thumbnailUrl,
      url,
    };
  
    chrome.runtime.sendMessage({ type: "YOUTUBE_METADATA", data: metadata });
  }
  
  // Always register the message listener
  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    const currentUrl = window.location.href;
  
    // Send video metadata if YouTube
    if (currentUrl.includes("youtube.com") && request.type === "getYouTubeData") {
      youTubeData();
      sendResponse({ status: "metadata sent" });
      return;
    }
  
    // Background color change
    const result = bgChange(request);
    if (result) {
      sendResponse(result);
    }
  });
  
















import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  build: {
    rollupOptions: {
      input: {
        popup: resolve(__dirname, 'index.html'),
        background: resolve(__dirname, 'src/background.js'),
        content: resolve(__dirname, 'src/script.js'),
      },
      output: {
        entryFileNames: assetInfo => {
          if (assetInfo.name === 'background') return 'background.js';
          if (assetInfo.name === 'content') return 'script.js';
          return 'assets/[name].js';
        }
      }
    },
    outDir: 'dist',
    emptyOutDir: true
  }
})
